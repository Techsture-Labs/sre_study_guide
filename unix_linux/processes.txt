# Processes (Operating Systems)

- A process is an executing program

- Process attributes
  - PID
    - The kernel assigns an ID to every process. Most of the system calls and commands that manipulate a process use this PID.
  - PPID
    - In Unix, a sytem call never creates a new process directly; instead, an existing process must clone itself and then exchange 
      the program to be executed. 
    - The creating process is called the parent process and the created process is called the child process. 
    - In the child process, the PPID is the ID of the parent process and PID is the ID that kernel assigns to the child process.
  - UID and EUID
    - UID is the user ID of the process creator (usually the parent process). 
    - EUID is the effectice user ID which can be used to restrict permissions to files for the current process. 
      - EUID is used in case of setuid and sudo.
  - GID and EGID 
    - GID is the group of the process creator, usually the owner of the parent process. 
      - EGID is similar to EUID where it can be used to upgrade permissions of the current process and usually set using setguid().
  - Niceness
    - The kernel uses a dynamic algorithm to dermine the amount of CPU time to be allocated to a process. 
      - This value can be over-ridden using the "nice value" or the "niceness" (so called because it tells your program/process will nice
        it will be to the other processes.
  - Control terminal
    - The control terminal determines the default linkage of standard input, output, and error channels.

- Processes are made up of:
  - Program Code
  - Machine Registers
  - Global Data
  - Stack
  - Open Files (File Descriptors)
  - An Environment (Environment Variables, Security Credentials)
    - Key=Value Pairs
  - Context Information
    - Process ID (PID)
      - Positive integer that uniquely identifies a running process
      - Stored in a variable of type pid_t
    - Parent Process ID (PPID)
    - Real User ID
      - ID of the user or process which started this process.
    - Effective User ID
      - ID of the user who wrote the process' program
    - Current Directory
    - File Descriptor Table
    - Environment
    - Pointer to Program Code
    - Pointer to Data
      - Memory for global variables
    - Pointer to Stack
      - Memory for local variables
    - Pointer to Heap
      - Dynamically allocated
    - Execution Priority
    - Signal Information

- Important File System Processes
  - init
    - Started at boot time
    - Responsible for starting other processes
    - Uses file inittab & directories /etc/rc?.d
  - getty
    - Login process that manages login sessions

- Process Methods:
  - exec()
    - Initiates a new program in the same environment in which it is operating.
    - The parent process never regains control unless there is an exec() error.
  - fork()
    - Creates a child process by making an exact duplicate of the parent process.
    - Both parent and child continue running.
  - getenv()
    - Searches the environment variable list for a string that matches the string requested.
    - Returns a pointer to the value in the environment or null if there is no match.
  - getpid()
    - Get Process ID (PID)
  - getppid()
    - Get Parent Process ID (PPID)
  - putenv()
    - Adds or changes the value of environment variables.
    - Takes arguments in the form of key=value string.
    - If the key doesn't exist in the environment then the string is added to the environment.
    - If the key does exist then the value in the environment is overwritten.
    - Returns 0 on success or -1 on error.
  - wait()
    - Suspends calling process until child has finished.
    - Returns the PID of the terminated child if OK, -1 if error.
  - waitpid()
    - Can wait for a particular child.

- New process lifecycle
  - Process copies itself with a fork() system call
  - fork() create a exact copy of the process and the kernel gives the child process a new PID
  - fork() returns 2 different values:
    - From the child's point of view, it returns 0. 
    - The parent receives the child's PID.
  - After fork(), the child will use exec() to start the execution of the new program.
  - When the process completes its execution, it calls a routine named `_exit` to notify kernel that it is ready to die. 
    - It also supplies an exit code:
      - 0: Success 
      - Non-0: Error
  - Before the process can be allowed to die completely, the kernel requires the parent process to acknowledge the death of 
    the child process. 
    - The parent process does this by calling wait(). 
    - The parent receives the exit code of the child process and can request for summary of childs resources.
  - If the parent process dies before the child process, the `init` process will accept the orphaned child process and call wait()

- Since a child process is a copy of the parent, is has copies of the parent's data.
  - A change to a variable in the child will not change that variable in the parent.

- Zombie Processes
  - A child process becomes a zombie process if the child exits when the parent isn't currently executing wait()
  - Status data about the child is stored until the parent does a wait()
  - The reason the process is a zombie is because it is "dead" but hasn't yet been "reaped" by the parent process.
  - Killing a Zombie Process:
    - Kill the parent.  This will force the zombie processes to become orphans.
    - Orphaned processes adopted by init will be wait()'d, which will cause them to be reaped.

- Orphan Processes
  - If a parent exits when 1 or more children are still running, the children are considered Orphan Processes.
  - Orphaned processes are adopted by init, which can then monitor or kill them.
