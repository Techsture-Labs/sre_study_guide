# Locks (Operating Systems)

- Two main types of kernel locks:
  - Spinlocks
    - If you cant get the spinlock, you keep trying (spinning) until you can.
    - Small, fast, can be used anywhere.
    - Best used for critical sections of code that are fast to complete.
    - It's imperative to not have any section of code inside a spinlock attempt to acquire a lock twice.  This results in a deadlock.
  - Semaphores
    - Simple counters that indicate the status of a resource.
      - if(counter > 0) then the resource is available.
      - if(counter <= 0) then the resource is unavailable (busy or being used by another process).
    - Can be either binary or counting, depending on the number of shared resources.
      - Binary (0 or 1, locked or unlocked) if a single shared resource is used.
      - Counting if the number of resources shared across users is greater than one.
    - Different from spinlocks because the task sleeps rather than busily waits (spins) while attempting to obtain the locked resource.
    - A process holding a semaphor is safe to block.
    - Can have more than one holder at a time (number decided at initialization)
    - Most commonly used as a single-holder lock (mutex).
    - If you can't get a semaphore, your task will put itself on the queue and be woken up when the semaphore is released.
      - The CPU will do something else while you're waiting, but in cases where you can't sleep, you have to use a spinlock instead.
    - Better for code sections that take more time to complete that sections where you'd use a spinlock.
  - Mutexes (Mutual Exclusions)
    - A semaphore with a count of 1.
    - Have the concept of an owner; only the process that locked the mutex is supposed to be able to unlock it.
    - May provide priority inversion safety.
      - If the mutex knows its current owner, it is possible to promote the priority of the owner whenever a higher priority task starts waiting on the mutex.
    - May provide deletion safety, where the process holding the mutex cannot be accidentally deleted.
